name: Maven Build and Publish to GitHub Packages

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on tags like v1.0.0, v1.2.3, v2.0.0-RC1 etc.

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for gh CLI (to check releases) and potentially creating releases
      packages: write  # Required to publish packages to GitHub Packages

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to get full commit history for short SHA

      - name: Get version and short commit hash
        id: get_version
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          # GITHUB_REF_NAME for tag 'v1.2.3' is 'v1.2.3'
          # We remove the 'v' prefix to get '1.2.3'
          BASE_VERSION="${GITHUB_REF_NAME#v}"
          # Construct the full version string in the format: base_version-short_commit_hash
          FULL_VERSION="${BASE_VERSION}-${SHORT_SHA}"

          echo "Base Version (from tag): ${BASE_VERSION}"
          echo "Short SHA: ${SHORT_SHA}"
          echo "Full Artifact Version: ${FULL_VERSION}"

          echo "full_version=${FULL_VERSION}" >> "$GITHUB_OUTPUT"
          echo "base_version=${BASE_VERSION}" >> "$GITHUB_OUTPUT"
          # Since this workflow only triggers on tags, 'is_tag' will always be true
          echo "is_tag=true" >> "$GITHUB_OUTPUT"

      - name: Check if GitHub Release already exists for this tag
        id: check_release_exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN is automatically provided
        run: |
          # Use the base version (e.g., '1.2.3') as the tag name for the GitHub Release check
          TAG_NAME="${{ steps.get_version.outputs.base_version }}"
          echo "Checking for existing GitHub Release for tag: ${TAG_NAME}"

          # Use GitHub CLI to check if a release for this tag already exists.
          # `gh release view` exits with 0 if found, 1 if not found.
          if gh release view "$TAG_NAME" &> /dev/null; then
            echo "GitHub Release '${TAG_NAME}' already exists. Skipping build and publish."
            echo "release_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "GitHub Release '${TAG_NAME}' does not exist. Proceeding with build and publish."
            echo "release_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Skip message if GitHub Release exists
        # This step runs only if a release for the current tag was found
        if: steps.check_release_exists.outputs.release_exists == 'true'
        run: |
          echo "::notice::Skipping build and publish as GitHub Release '${{ steps.get_version.outputs.base_version }}' already exists."
          exit 0 # Exit the job early, effectively skipping all subsequent steps

      # --- All subsequent steps will only run if a release does NOT exist for the tag ---

      - name: Set up JDK 21
        # This step and subsequent ones will only run if 'release_exists' is not 'true'
        if: steps.check_release_exists.outputs.release_exists != 'true'
        uses: actions/setup-java@v4
        with:
          java-version: '21' # Or your desired Java version (e.g., '17', '21')
          distribution: 'temurin' # Or 'adopt', 'microsoft', etc.
          # This will generate a settings.xml in the workspace root
          # with a server entry for 'github' and credentials using GITHUB_TOKEN.
          settings-path: ${{ github.workspace }}
          server-id: github

      - name: Update POM version to tag version with short commit hash
        # This step ensures the pom.xml's <version> matches the new format (e.g., 1.3.0-abcdefg)
        if: steps.check_release_exists.outputs.release_exists != 'true'
        run: mvn versions:set -DnewVersion=${{ steps.get_version.outputs.full_version }} -DgenerateBackupPoms=false

      - name: Build with Maven
        # Runs tests and builds the artifact
        if: steps.check_release_exists.outputs.release_exists != 'true'
        run: mvn clean install -B # -B for batch mode (non-interactive)

      - name: Publish to GitHub Packages
        # The -s flag points to the settings.xml generated by setup-java
        # This settings.xml contains the necessary authentication for GitHub Packages.
        if: steps.check_release_exists.outputs.release_exists != 'true'
        run: mvn deploy -s ${{ github.workspace }}/settings.xml
        env:
          # GITHUB_TOKEN is automatically provided by GitHub Actions
          # and used by setup-java to configure settings.xml.
          # Explicitly setting it here ensures it's available for Maven if needed.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release (Optional)
        # This step creates a formal GitHub Release entry for the tag.
        # It runs only if a release does NOT already exist and the build/publish was successful.
        if: steps.check_release_exists.outputs.release_exists != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.base_version }} # Use the base tag name (e.g., '1.2.3') for the release
          name: Release ${{ steps.get_version.outputs.base_version }}
          body: |
            Automated release for tag `${{ github.ref_name }}`.
            Full artifact version: `${{ steps.get_version.outputs.full_version }}`
            Commit SHA: `${{ github.sha }}`
          draft: false
          prerelease: false
          # You can attach your build artifacts (e.g., JARs) to the GitHub Release here:
          # files: target/*.jar # Uncomment and adjust if you want to attach the JAR to the GitHub Release
